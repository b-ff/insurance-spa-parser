!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,u=i.length;s<u;s++,o++)r[o]=i[s];return r},r=["Отчёт МО в МГФОМС","Отчёт МО в СМО"],o=/^filter-panel-\d{4,}_header-title-textEl$/,i=/^messageTypeCombo-\d{4,}-picker-listEl$/,s=/^messageTypeCombo-\d{4,}-trigger-picker$/,u=/^commonInsurersCombo-\d{4,}-picker-listEl$/,l=/^commonInsurersCombo-\d{4,}-trigger-picker$/,a=/^filter-panel-\d{4,}$/,c=/^parcelsList-\d{4,}-body$/,f=function(e,t,n){void 0===n&&(n="div");var r=e.querySelectorAll(n);return Array.from(r).find((function(e){return t.test(e.id)}))},g=function(){function e(){var e=this;this.timeoutIDs=[],this.isRunning=!1;var t=setInterval((function(){var n=f(document,o);if(n){e.addStartButton(n);var r=f(document,l),i=f(document,s);i.click(),setTimeout((function(){i.click(),r.click(),setTimeout((function(){r.click()}),500)}),500),clearInterval(t)}}),500);this.log("Parser initialized!")}return e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console&&console.log&&console.log.apply(console,n(["Parser: "],e))},e.prototype.addStartButton=function(e){var t=this,n=document.createElement("button");n.innerHTML="Запустить сбор данных",n.id="parser-start-button",n.style.marginLeft="10px",n.style.cursor="pointer",n.onclick=function(){t.isRunning?t.stopParser():t.startParser(),n.innerHTML=t.isRunning?"Остановить сбор данных":"Запустить сбор данных"},e.append(n),this.log("Added start button to container:",e)},e.prototype.startParser=function(){var e=this;this.log("Parser started!"),this.isRunning=!0,this.timeoutIDs=[];var t=this.getMessageTypes(),n=this.getInsurers();this.log("Loaded filter values:",{messageTypes:t,insurers:n}),this.log("Running a queue");var r=0;t.forEach((function(o,i){e.log("Checking message type for MGFOMS","Отчёт МО в МГФОМС"===o);var s=n.filter((function(e){var t=e.toLocaleLowerCase().includes("МГФОМС".toLocaleLowerCase());return"Отчёт МО в МГФОМС"!==o||t}));e.log("Filtered insurers according to message type",s),s.forEach((function(n,u){var l=setTimeout((function(){e.log("Applying filter values:",{messageType:o,insurer:n}),e.setMessageType(o),e.setInsurer(n),e.getFilterSubmitButton().click();var r=setTimeout((function(){e.log("Getting files list");var n=e.getFilesList();n.length?(e.log("Found "+n.length+" files"),e.downloadFile(e.getFilesList().pop())):e.log("No files for selected filters");var r=i===t.length-1,o=u===s.length-1;r&&o&&alert("Загрузка файлов завершена!")}),5e3);e.timeoutIDs.push(r)}),7e3*r);e.timeoutIDs.push(l),r++}))}))},e.prototype.stopParser=function(){this.timeoutIDs.forEach((function(e){clearTimeout(e)})),this.isRunning=!1},e.prototype.getMessageTypeSuggestions=function(){return Array.from(f(document,i,"ul").childNodes)},e.prototype.getMessageTypes=function(){return this.getMessageTypeSuggestions().map((function(e){return e.textContent})).filter((function(e){return r.includes(e)}))},e.prototype.setMessageType=function(e){this.getMessageTypeSuggestions().find((function(t){return t.textContent===e})).click(),this.log("Set message type filter to:",e)},e.prototype.getInsurersSuggestions=function(){return Array.from(f(document,u,"ul").childNodes)},e.prototype.getInsurers=function(){return this.getInsurersSuggestions().map((function(e){return e.textContent}))},e.prototype.setInsurer=function(e){this.getInsurersSuggestions().find((function(t){return t.textContent===e})).click(),this.log("Set insurer filter to:",e)},e.prototype.getFilterSubmitButton=function(){var e=f(document,a).querySelectorAll("a.x-btn");return e.length?e[0]:null},e.prototype.getDateFromElement=function(e){if(e){if(e.textContent)return t=e.textContent,n="dd.mm.yyyy hh:ii",r=t.replace(/[^a-zA-Z0-9]/g,"-"),o=n.toLowerCase().replace(/[^a-zA-Z0-9]/g,"-").split("-"),i=r.split("-"),s=o.indexOf("mm"),u=o.indexOf("dd"),l=o.indexOf("yyyy"),a=o.indexOf("hh"),c=o.indexOf("ii"),f=o.indexOf("ss"),g=new Date,d=l>-1?+i[l]:g.getFullYear(),p=s>-1?+i[s]:g.getMonth(),y=u>-1?+i[u]:g.getDate(),m=a>-1?+i[a]:g.getHours(),h=c>-1?+i[c]:g.getMinutes(),v=f>-1?+i[f]:g.getSeconds(),new Date(d,p,y,m,h,v);this.log("Empty Date Cell Text!",e)}else this.log("Date node not found!",e);var t,n,r,o,i,s,u,l,a,c,f,g,d,p,y,m,h,v;return null},e.prototype.getFilesList=function(){var e=this;return Array.from(f(document,c).querySelectorAll("table")).map((function(t){var n=t.querySelectorAll("td"),r=Array.from(n).find((function(e){return e.querySelector("a")})),o=n[9],i=r?r.querySelector("a"):null;return{url:i?i.href:null,sendDate:o?e.getDateFromElement(o.firstChild):new Date}})).filter((function(e){return!!e.url})).sort((function(e,t){return e.sendDate.getTime()-t.sendDate.getTime()}))},e.prototype.downloadFile=function(e){this.log("file download >>",e),e.url&&window.open(e.url,"_blank")},e}();!function(e){e.parser=new g,e.getElementByIdPattern=f}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,