!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e){var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,u=i.length;s<u;s++,o++)r[o]=i[s];return r},r=["Отчёт МО в МГФОМС","Отчёт МО в СМО"],o=/^filter-panel-\d{4,}_header-title-textEl$/,i=/^messageTypeCombo-\d{4,}-picker-listEl$/,s=/^messageTypeCombo-\d{4,}-trigger-picker$/,u=/^commonInsurersCombo-\d{4,}-picker-listEl$/,l=/^commonInsurersCombo-\d{4,}-trigger-picker$/,a=/^filter-panel-\d{4,}$/,c=/^parcelsList-\d{4,}-body$/,f=function(t,e,n){void 0===n&&(n="div");var r=t.querySelectorAll(n);return Array.from(r).find((function(t){return e.test(t.id)}))},g=function(){function t(){var t=this;this.timeoutIDs=[],this.isRunning=!1;var e=setInterval((function(){var n=f(document,o);if(n){t.addStartButton(n);var r=f(document,l),i=f(document,s);i.click(),setTimeout((function(){i.click(),r.click(),setTimeout((function(){r.click()}),500)}),500),clearInterval(e)}}),500);this.log("Parser initialized!")}return t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console&&console.log&&console.log.apply(console,n(["Parser: "],t))},t.prototype.addStartButton=function(t){var e=this,n=document.createElement("button");n.innerHTML="Запустить сбор данных",n.id="parser-start-button",n.style.marginLeft="10px",n.style.cursor="pointer",n.onclick=function(){e.isRunning?e.stopParser():e.startParser(),n.innerHTML=e.isRunning?"Остановить сбор данных":"Запустить сбор данных"},t.append(n),this.log("Added start button to container:",t)},t.prototype.startParser=function(){var t=this;this.log("Parser started!"),this.isRunning=!0,this.timeoutIDs=[];var e=this.getMessageTypes(),n=this.getInsurers();this.log("Loaded filter values:",{messageTypes:e,insurers:n}),this.log("Running a queue");var r=0;e.forEach((function(o,i){n.forEach((function(s,u){var l=setTimeout((function(){t.log("Applying filter values:",{messageType:o,insurer:s}),t.setMessageType(o),t.setInsurer(s),t.getFilterSubmitButton().click();var r=setTimeout((function(){t.log("Getting files list");var r=t.getFilesList();r.length?(t.log("Found "+r.length+" files"),t.downloadFile(t.getFilesList().pop())):t.log("No files for selected filters");var o=i===e.length-1,s=u===n.length-1;o&&s&&alert("Загрузка файлов завершена!")}),5e3);t.timeoutIDs.push(r)}),7e3*r);t.timeoutIDs.push(l),r++}))}))},t.prototype.stopParser=function(){this.timeoutIDs.forEach((function(t){clearTimeout(t)})),this.isRunning=!1},t.prototype.getMessageTypeSuggestions=function(){return Array.from(f(document,i,"ul").childNodes)},t.prototype.getMessageTypes=function(){return this.getMessageTypeSuggestions().map((function(t){return t.textContent})).filter((function(t){return r.includes(t)}))},t.prototype.setMessageType=function(t){this.getMessageTypeSuggestions().find((function(e){return e.textContent===t})).click(),this.log("Set message type filter to:",t)},t.prototype.getInsurersSuggestions=function(){return Array.from(f(document,u,"ul").childNodes)},t.prototype.getInsurers=function(){return this.getInsurersSuggestions().map((function(t){return t.textContent}))},t.prototype.setInsurer=function(t){this.getInsurersSuggestions().find((function(e){return e.textContent===t})).click(),this.log("Set insurer filter to:",t)},t.prototype.getFilterSubmitButton=function(){var t=f(document,a).querySelectorAll("a.x-btn");return t.length?t[0]:null},t.prototype.getDateFromElement=function(t){if(t){if(t.textContent)return e=t.textContent,n="dd.mm.yyyy hh:ii",r=e.replace(/[^a-zA-Z0-9]/g,"-"),o=n.toLowerCase().replace(/[^a-zA-Z0-9]/g,"-").split("-"),i=r.split("-"),s=o.indexOf("mm"),u=o.indexOf("dd"),l=o.indexOf("yyyy"),a=o.indexOf("hh"),c=o.indexOf("ii"),f=o.indexOf("ss"),g=new Date,p=l>-1?+i[l]:g.getFullYear(),d=s>-1?+i[s]:g.getMonth(),y=u>-1?+i[u]:g.getDate(),m=a>-1?+i[a]:g.getHours(),h=c>-1?+i[c]:g.getMinutes(),v=f>-1?+i[f]:g.getSeconds(),new Date(p,d,y,m,h,v);this.log("Empty Date Cell Text!",t)}else this.log("Date node not found!",t);var e,n,r,o,i,s,u,l,a,c,f,g,p,d,y,m,h,v;return null},t.prototype.getFilesList=function(){var t=this;return Array.from(f(document,c).querySelectorAll("table")).map((function(e){var n=e.querySelectorAll("td"),r=n[5],o=n[9],i=r?r.querySelector("a"):null;return{url:i?i.href:null,sendDate:o?t.getDateFromElement(o.firstChild):new Date}})).filter((function(t){return!!t.url})).sort((function(t,e){return t.sendDate.getTime()-e.sendDate.getTime()}))},t.prototype.downloadFile=function(t){this.log("file download >>",t),t.url&&window.open(t.url,"_blank")},t}();!function(t){t.parser=new g,t.getElementByIdPattern=f}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,